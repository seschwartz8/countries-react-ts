{"ast":null,"code":"var _jsxFileName = \"/Users/Sarah Schwartz/Desktop/CODING/Apps TYPESCRIPT/countries-react-ts/src/components/App.tsx\";\nimport React, { useEffect, useReducer } from 'react';\nimport CardList from './CardList';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'fetch_countries':\n      return { ...state,\n        countries: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst App = () => {\n  const initialState = {\n    countries: []\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    //Fetch country data and set it on state\n    // FOR NOW JUST PUTTING FAKE DATA\n    dispatch;\n  }, []);\n  return React.createElement(CardList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  });\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/Sarah Schwartz/Desktop/CODING/Apps TYPESCRIPT/countries-react-ts/src/components/App.tsx"],"names":["React","useEffect","useReducer","CardList","reducer","state","action","type","countries","payload","App","initialState","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAoBA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAkBC,MAAlB,KAAqC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,iBAAL;AACE,aAAO,EAAE,GAAGF,KAAL;AAAYG,QAAAA,SAAS,EAAEF,MAAM,CAACG;AAA9B,OAAP;;AACF;AACE,aAAOJ,KAAP;AAJJ;AAMD,CAPD;;AASA,MAAMK,GAAG,GAAG,MAAM;AAChB,QAAMC,YAAsB,GAAG;AAC7BH,IAAAA,SAAS,EAAE;AADkB,GAA/B;AAGA,QAAM,CAACH,KAAD,EAAkBO,QAAlB,IAA8BV,UAAU,CAACE,OAAD,EAAUO,YAAV,CAA9C;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACAW,IAAAA,QAAQ;AACT,GAJQ,EAIN,EAJM,CAAT;AAMA,SAAO,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAbD;;AAeA,eAAeF,GAAf","sourcesContent":["import React, { useEffect, useReducer } from 'react';\nimport CardList from './CardList';\n\nexport interface Country {\n  imgUrl: string;\n  name: string;\n  population: string;\n  region: string;\n  capital: string;\n}\n\ninterface AppState {\n  countries: Country[];\n}\n\ninterface Action {\n  type: string;\n  // Accept additional properties\n  [x: string]: any;\n}\n\nconst reducer = (state: AppState, action: Action) => {\n  switch (action.type) {\n    case 'fetch_countries':\n      return { ...state, countries: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst App = () => {\n  const initialState: AppState = {\n    countries: []\n  }\n  const [state: AppState, dispatch] = useReducer(reducer, initialState)\n\n  useEffect(() => {\n    //Fetch country data and set it on state\n    // FOR NOW JUST PUTTING FAKE DATA\n    dispatch\n  }, []);\n\n  return <CardList />;\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}