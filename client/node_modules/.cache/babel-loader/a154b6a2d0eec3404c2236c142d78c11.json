{"ast":null,"code":"var _jsxFileName = \"/Users/Sarah Schwartz/Desktop/CODING/Apps TYPESCRIPT/world-traveler-react-ts/client/src/components/LeafletMap.tsx\";\nimport React, { PureComponent } from 'react';\nimport Leaflet from 'leaflet';\nimport { Map, Marker, Popup, TileLayer, GeoJSON } from 'react-leaflet';\nLeaflet.Icon.Default.imagePath = '//cdnjs.cloudflare.com/ajax/libs/leaflet/1.0.0/images/';\nconst markers = [{\n  name: 'Kottbusser Tor',\n  latlng: [52.49904, 13.418392]\n}, {\n  name: 'Görlitzer Park',\n  latlng: [52.496912, 13.436738]\n}, {\n  name: 'webkid',\n  latlng: [52.501106, 13.422061]\n}];\nconst mapConfig = {\n  center: [52.499219, 13.425416],\n  zoom: 1\n}; // Data for GeoJSON usage\n\nconst data = {\n  type: 'FeatureCollection',\n  features: [{\n    type: 'Feature',\n    id: '01',\n    properties: {\n      name: 'Alabama',\n      density: 94.65\n    },\n    geometry: {\n      type: 'Polygon',\n      coordinates: [[[-87.359296, 35.00118], [-85.606675, 34.984749], [-85.431413, 34.124869], [-85.184951, 32.859696], [-85.069935, 32.580372], [-84.960397, 32.421541], [-85.004212, 32.322956], [-84.889196, 32.262709], [-85.058981, 32.13674], [-85.053504, 32.01077], [-85.141136, 31.840985], [-85.042551, 31.539753], [-85.113751, 31.27686], [-85.004212, 31.003013], [-85.497137, 30.997536], [-87.600282, 30.997536], [-87.633143, 30.86609], [-87.408589, 30.674397], [-87.446927, 30.510088], [-87.37025, 30.427934], [-87.518128, 30.280057], [-87.655051, 30.247195], [-87.90699, 30.411504], [-87.934375, 30.657966], [-88.011052, 30.685351], [-88.10416, 30.499135], [-88.137022, 30.318396], [-88.394438, 30.367688], [-88.471115, 31.895754], [-88.241084, 33.796253], [-88.098683, 34.891641], [-88.202745, 34.995703], [-87.359296, 35.00118]]]\n    }\n  }]\n};\n\nclass ReactLeafletMap extends PureComponent {\n  // Get the style for your polygons from GeoJSON, it can be dependable on a parameter you want.\n  // For example, you can use different style for different density of the location\n  getStyle() {\n    return {\n      fillColor: '#ece7f2',\n      weight: 2,\n      opacity: 1,\n      color: 'blue',\n      dashArray: '3',\n      fillOpacity: 0.7\n    };\n  }\n\n  render() {\n    // create an array with marker components\n    const LeafletMarkers = markers.map(marker => // @ts-ignore\n    React.createElement(Marker, {\n      position: marker.latlng,\n      key: `marker_${marker.name}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(Popup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, marker.name))));\n    return React.createElement(\"div\", {\n      className: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(Map // @ts-ignore\n    , {\n      center: mapConfig.center,\n      zoom: mapConfig.zoom,\n      className: \"map__reactleaflet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(TileLayer, {\n      url: \"https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 <a href=\\\"http://www.openstreetmap.org/copyright\\\">OpenStreetMap</a>, \\xA9 <a href=\\\"https://carto.com/attribution\\\">CARTO</a>\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), LeafletMarkers, React.createElement(GeoJSON, {\n      data: data,\n      style: this.getStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default ReactLeafletMap;","map":{"version":3,"sources":["/Users/Sarah Schwartz/Desktop/CODING/Apps TYPESCRIPT/world-traveler-react-ts/client/src/components/LeafletMap.tsx"],"names":["React","PureComponent","Leaflet","Map","Marker","Popup","TileLayer","GeoJSON","Icon","Default","imagePath","markers","name","latlng","mapConfig","center","zoom","data","type","features","id","properties","density","geometry","coordinates","ReactLeafletMap","getStyle","fillColor","weight","opacity","color","dashArray","fillOpacity","render","LeafletMarkers","map","marker"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport Leaflet from 'leaflet';\nimport { Map, Marker, Popup, TileLayer, GeoJSON } from 'react-leaflet';\n\nLeaflet.Icon.Default.imagePath =\n  '//cdnjs.cloudflare.com/ajax/libs/leaflet/1.0.0/images/';\n\nconst markers = [\n  {\n    name: 'Kottbusser Tor',\n    latlng: [52.49904, 13.418392],\n  },\n  {\n    name: 'Görlitzer Park',\n    latlng: [52.496912, 13.436738],\n  },\n  {\n    name: 'webkid',\n    latlng: [52.501106, 13.422061],\n  },\n];\n\nconst mapConfig = {\n  center: [52.499219, 13.425416],\n  zoom: 1,\n};\n\n// Data for GeoJSON usage\nconst data = {\n  type: 'FeatureCollection',\n  features: [\n    {\n      type: 'Feature',\n      id: '01',\n      properties: { name: 'Alabama', density: 94.65 },\n      geometry: {\n        type: 'Polygon',\n        coordinates: [\n          [\n            [-87.359296, 35.00118],\n            [-85.606675, 34.984749],\n            [-85.431413, 34.124869],\n            [-85.184951, 32.859696],\n            [-85.069935, 32.580372],\n            [-84.960397, 32.421541],\n            [-85.004212, 32.322956],\n            [-84.889196, 32.262709],\n            [-85.058981, 32.13674],\n            [-85.053504, 32.01077],\n            [-85.141136, 31.840985],\n            [-85.042551, 31.539753],\n            [-85.113751, 31.27686],\n            [-85.004212, 31.003013],\n            [-85.497137, 30.997536],\n            [-87.600282, 30.997536],\n            [-87.633143, 30.86609],\n            [-87.408589, 30.674397],\n            [-87.446927, 30.510088],\n            [-87.37025, 30.427934],\n            [-87.518128, 30.280057],\n            [-87.655051, 30.247195],\n            [-87.90699, 30.411504],\n            [-87.934375, 30.657966],\n            [-88.011052, 30.685351],\n            [-88.10416, 30.499135],\n            [-88.137022, 30.318396],\n            [-88.394438, 30.367688],\n            [-88.471115, 31.895754],\n            [-88.241084, 33.796253],\n            [-88.098683, 34.891641],\n            [-88.202745, 34.995703],\n            [-87.359296, 35.00118],\n          ],\n        ],\n      },\n    },\n  ],\n};\n\ninterface MapProps {}\n\nclass ReactLeafletMap extends PureComponent {\n  // Get the style for your polygons from GeoJSON, it can be dependable on a parameter you want.\n  // For example, you can use different style for different density of the location\n  getStyle() {\n    return {\n      fillColor: '#ece7f2',\n      weight: 2,\n      opacity: 1,\n      color: 'blue',\n      dashArray: '3',\n      fillOpacity: 0.7,\n    };\n  }\n\n  render() {\n    // create an array with marker components\n    const LeafletMarkers = markers.map((marker) => (\n      // @ts-ignore\n      <Marker position={marker.latlng} key={`marker_${marker.name}`}>\n        <Popup>\n          <span>{marker.name}</span>\n        </Popup>\n      </Marker>\n    ));\n\n    return (\n      <div className='map'>\n        <Map\n          // @ts-ignore\n\n          center={mapConfig.center}\n          zoom={mapConfig.zoom}\n          className='map__reactleaflet'\n        >\n          <TileLayer\n            url='https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png'\n            attribution='&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>, &copy; <a href=\"https://carto.com/attribution\">CARTO</a>'\n          />\n          {LeafletMarkers}\n          {/* You can now try to find Alabama on a Map to see how it looks like now with GeoJSON*/}\n          <GeoJSON data={data} style={this.getStyle} />\n        </Map>\n      </div>\n    );\n  }\n}\n\nexport default ReactLeafletMap;\n"]},"metadata":{},"sourceType":"module"}