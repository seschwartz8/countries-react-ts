{"ast":null,"code":"var _jsxFileName = \"/Users/Sarah Schwartz/Desktop/CODING/Apps TYPESCRIPT/countries-react-ts/src/components/App.tsx\";\nimport React, { useEffect, useReducer } from 'react';\nimport CardList from './CardList';\nimport axios from 'axios';\n\nconst App = () => {\n  const reducer = (state, action) => {\n    switch (action.type) {\n      case 'fetch_countries':\n        return { ...state,\n          countries: action.payload,\n          error: null,\n          loading: false\n        };\n\n      case 'error':\n        return { ...state,\n          error: action.payload,\n          loading: false\n        };\n\n      default:\n        return state;\n    }\n  };\n\n  const initialState = {\n    countries: [],\n    error: null,\n    loading: true\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    const url = `https://restcountries.eu/rest/v2/all`; //Fetch country data and set it on state\n\n    axios.get(url).then(response => {\n      console.log(response.data);\n      const countries = response.data.map(result => {\n        return {\n          imgUrl: result.flag,\n          name: result.name,\n          population: result.population,\n          region: result.region,\n          capital: result.capital\n        };\n      });\n      dispatch({\n        type: 'fetch_countries',\n        payload: countries\n      });\n    }).catch(error => {\n      dispatch({\n        type: 'error',\n        payload: error.message\n      });\n    });\n  }, []);\n\n  if (state.loading) {\n    return React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Loading...\");\n  }\n\n  if (state.error) {\n    return React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, state.error);\n  }\n\n  return React.createElement(CardList, {\n    countries: state.countries,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  });\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/Sarah Schwartz/Desktop/CODING/Apps TYPESCRIPT/countries-react-ts/src/components/App.tsx"],"names":["React","useEffect","useReducer","CardList","axios","App","reducer","state","action","type","countries","payload","error","loading","initialState","dispatch","url","get","then","response","console","log","data","map","result","imgUrl","flag","name","population","region","capital","catch","message"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;;AA+BA,MAAMC,GAAG,GAAG,MAAM;AAChB,QAAMC,OAAO,GAAG,CAACC,KAAD,EAAkBC,MAAlB,KAAqC;AACnD,YAAQA,MAAM,CAACC,IAAf;AACE,WAAK,iBAAL;AACE,eAAO,EACL,GAAGF,KADE;AAELG,UAAAA,SAAS,EAAEF,MAAM,CAACG,OAFb;AAGLC,UAAAA,KAAK,EAAE,IAHF;AAILC,UAAAA,OAAO,EAAE;AAJJ,SAAP;;AAMF,WAAK,OAAL;AACE,eAAO,EAAE,GAAGN,KAAL;AAAYK,UAAAA,KAAK,EAAEJ,MAAM,CAACG,OAA1B;AAAmCE,UAAAA,OAAO,EAAE;AAA5C,SAAP;;AACF;AACE,eAAON,KAAP;AAXJ;AAaD,GAdD;;AAgBA,QAAMO,YAAsB,GAAG;AAC7BJ,IAAAA,SAAS,EAAE,EADkB;AAE7BE,IAAAA,KAAK,EAAE,IAFsB;AAG7BC,IAAAA,OAAO,EAAE;AAHoB,GAA/B;AAKA,QAAM,CAACN,KAAD,EAAQQ,QAAR,IAAoBb,UAAU,CAACI,OAAD,EAAUQ,YAAV,CAApC;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,GAAG,GAAI,sCAAb,CADc,CAEd;;AACAZ,IAAAA,KAAK,CACFa,GADH,CACOD,GADP,EAEGE,IAFH,CAESC,QAAD,IAAc;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACA,YAAMZ,SAAoB,GAAGS,QAAQ,CAACG,IAAT,CAAcC,GAAd,CAC1BC,MAAD,IAAmC;AACjC,eAAO;AACLC,UAAAA,MAAM,EAAED,MAAM,CAACE,IADV;AAELC,UAAAA,IAAI,EAAEH,MAAM,CAACG,IAFR;AAGLC,UAAAA,UAAU,EAAEJ,MAAM,CAACI,UAHd;AAILC,UAAAA,MAAM,EAAEL,MAAM,CAACK,MAJV;AAKLC,UAAAA,OAAO,EAAEN,MAAM,CAACM;AALX,SAAP;AAOD,OAT0B,CAA7B;AAWAf,MAAAA,QAAQ,CAAC;AAAEN,QAAAA,IAAI,EAAE,iBAAR;AAA2BE,QAAAA,OAAO,EAAED;AAApC,OAAD,CAAR;AACD,KAhBH,EAiBGqB,KAjBH,CAiBUnB,KAAD,IAAW;AAChBG,MAAAA,QAAQ,CAAC;AAAEN,QAAAA,IAAI,EAAE,OAAR;AAAiBE,QAAAA,OAAO,EAAEC,KAAK,CAACoB;AAAhC,OAAD,CAAR;AACD,KAnBH;AAoBD,GAvBQ,EAuBN,EAvBM,CAAT;;AAyBA,MAAIzB,KAAK,CAACM,OAAV,EAAmB;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AAED,MAAIN,KAAK,CAACK,KAAV,EAAiB;AACf,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKL,KAAK,CAACK,KAAX,CAAP;AACD;;AAED,SAAO,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAEL,KAAK,CAACG,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CA1DD;;AA4DA,eAAeL,GAAf","sourcesContent":["import React, { useEffect, useReducer } from 'react';\nimport CardList from './CardList';\nimport Loading from './Loading';\nimport axios from 'axios';\n\nexport interface Country {\n  id: number;\n  imgUrl: string;\n  name: string;\n  population: string;\n  region: string;\n  capital: string;\n}\n\ninterface AppState {\n  countries: Country[];\n  error: string | null;\n  loading: boolean;\n}\n\ninterface Action {\n  type: string;\n  // Accept additional properties\n  [x: string]: any;\n}\n\ninterface RESTCountriesResponse {\n  flag: string;\n  name: string;\n  population: number;\n  region: string;\n  capital: string;\n}\n\nconst App = () => {\n  const reducer = (state: AppState, action: Action) => {\n    switch (action.type) {\n      case 'fetch_countries':\n        return {\n          ...state,\n          countries: action.payload,\n          error: null,\n          loading: false,\n        };\n      case 'error':\n        return { ...state, error: action.payload, loading: false };\n      default:\n        return state;\n    }\n  };\n\n  const initialState: AppState = {\n    countries: [],\n    error: null,\n    loading: true,\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    const url = `https://restcountries.eu/rest/v2/all`;\n    //Fetch country data and set it on state\n    axios\n      .get(url)\n      .then((response) => {\n        console.log(response.data);\n        const countries: Country[] = response.data.map(\n          (result: RESTCountriesResponse) => {\n            return {\n              imgUrl: result.flag,\n              name: result.name,\n              population: result.population,\n              region: result.region,\n              capital: result.capital,\n            };\n          }\n        );\n        dispatch({ type: 'fetch_countries', payload: countries });\n      })\n      .catch((error) => {\n        dispatch({ type: 'error', payload: error.message });\n      });\n  }, []);\n\n  if (state.loading) {\n    return <h1>Loading...</h1>;\n  }\n\n  if (state.error) {\n    return <h3>{state.error}</h3>;\n  }\n\n  return <CardList countries={state.countries} />;\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}