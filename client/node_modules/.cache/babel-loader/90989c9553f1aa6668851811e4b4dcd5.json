{"ast":null,"code":"var _jsxFileName = \"/Users/Sarah Schwartz/Desktop/CODING/Apps TYPESCRIPT/world-traveler-react-ts/client/src/components/App.tsx\";\nimport React, { useEffect, useReducer } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport ModeContext from '../contexts/mode';\nimport CardList from './CardList';\nimport Loading from './Loading';\nimport Nav from './Nav';\nimport Countries from './Countries';\nimport Destinations from './Destinations';\nimport axios from 'axios';\nimport styled from 'styled-components';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'loading':\n      return { ...state,\n        loading: true\n      };\n\n    case 'fetch_countries':\n      return { ...state,\n        countries: action.payload,\n        error: null,\n        loading: false\n      };\n\n    case 'error':\n      return { ...state,\n        error: action.payload,\n        loading: false\n      };\n\n    case 'toggle_mode':\n      return { ...state,\n        mode: action.payload\n      };\n\n    case 'submit_search':\n      return { ...state,\n        search: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst App = () => {\n  const initialState = {\n    countries: [],\n    error: null,\n    loading: true,\n    mode: 'light',\n    search: ''\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    dispatch({\n      type: 'loading'\n    });\n    const url = state.search !== '' ? `https://restcountries.eu/rest/v2/name/${state.search}` : `https://restcountries.eu/rest/v2/all`; //Fetch country data and set it on state\n\n    axios.get(url).then(response => {\n      const countries = response.data.map((result, index) => {\n        console.log(result);\n        return {\n          id: index,\n          imgUrl: result.flag,\n          name: result.name,\n          population: result.population,\n          region: result.region,\n          capital: result.capital,\n          latitude: result.latlng[0],\n          longitude: result.latlng[1]\n        };\n      });\n      dispatch({\n        type: 'fetch_countries',\n        payload: countries\n      });\n    }).catch(error => {\n      state.search !== '' ? dispatch({\n        type: 'error',\n        payload: 'No countries matched your search.'\n      }) : dispatch({\n        type: 'error',\n        payload: error.message\n      });\n    });\n  }, [state.search]);\n\n  const toggleMode = () => {\n    const newMode = state.mode === 'light' ? 'dark' : 'light';\n    dispatch({\n      type: 'toggle_mode',\n      payload: newMode\n    });\n  };\n\n  const onSearchSubmit = input => {\n    dispatch({\n      type: 'submit_search',\n      payload: input\n    });\n  };\n\n  const renderCountries = () => {\n    if (state.loading) {\n      return React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      });\n    }\n\n    if (state.error) {\n      return React.createElement(Error, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, state.error);\n    }\n\n    return React.createElement(CardList, {\n      countries: state.countries,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    });\n  };\n\n  return React.createElement(Router, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, React.createElement(ModeContext.Provider, {\n    value: state.mode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(StyledApp, {\n    mode: state.mode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(Nav, {\n    toggleMode: toggleMode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }), React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    render: props => React.createElement(Countries, Object.assign({}, props, {\n      onSearchSubmit: onSearchSubmit,\n      renderContent: renderCountries,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }), React.createElement(Route, {\n    exact: true,\n    path: \"/destinations\",\n    component: Destinations,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  })))));\n};\n\nexport default App; // Styled component\n\nconst StyledApp = styled.div`\n  min-height: 100vh;\n\n  ${({\n  mode = 'light'\n}) => mode === `light` ? `\n    background-color: #ededed;\n    color: black;\n  ` : `\n    background-color: #212E37;\n    color: white;\n  `};\n`;\nconst Error = styled.h3`\n  text-align: center;\n  margin: 3%;\n`;","map":{"version":3,"sources":["/Users/Sarah Schwartz/Desktop/CODING/Apps TYPESCRIPT/world-traveler-react-ts/client/src/components/App.tsx"],"names":["React","useEffect","useReducer","BrowserRouter","Router","Route","Switch","ModeContext","CardList","Loading","Nav","Countries","Destinations","axios","styled","reducer","state","action","type","loading","countries","payload","error","mode","search","App","initialState","dispatch","url","get","then","response","data","map","result","index","console","log","id","imgUrl","flag","name","population","region","capital","latitude","latlng","longitude","catch","message","toggleMode","newMode","onSearchSubmit","input","renderCountries","props","StyledApp","div","Error","h3"],"mappings":"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","sourcesContent":["import React, { useEffect, useReducer } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport ModeContext from '../contexts/mode';\nimport CardList from './CardList';\nimport Loading from './Loading';\nimport Nav from './Nav';\nimport Countries from './Countries';\nimport Destinations from './Destinations';\nimport axios from 'axios';\nimport styled from 'styled-components';\n\nexport interface Country {\n  id: number;\n  imgUrl: string;\n  name: string;\n  population: string;\n  region: string;\n  capital: string;\n  latitude: number;\n  longitude: number;\n}\n\ninterface AppState {\n  countries: Country[];\n  error: string | null;\n  loading: boolean;\n  mode: string;\n  search: string;\n}\n\ninterface Action {\n  type: string;\n  // Accept additional properties\n  [x: string]: any;\n}\n\ninterface RESTCountriesResponse {\n  flag: string;\n  name: string;\n  population: number;\n  region: string;\n  capital: string;\n  latlng: [number, number];\n}\n\nconst reducer = (state: AppState, action: Action) => {\n  switch (action.type) {\n    case 'loading':\n      return {\n        ...state,\n        loading: true,\n      };\n    case 'fetch_countries':\n      return {\n        ...state,\n        countries: action.payload,\n        error: null,\n        loading: false,\n      };\n    case 'error':\n      return { ...state, error: action.payload, loading: false };\n    case 'toggle_mode':\n      return { ...state, mode: action.payload };\n    case 'submit_search':\n      return { ...state, search: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst App = () => {\n  const initialState: AppState = {\n    countries: [],\n    error: null,\n    loading: true,\n    mode: 'light',\n    search: '',\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    dispatch({ type: 'loading' });\n\n    const url =\n      state.search !== ''\n        ? `https://restcountries.eu/rest/v2/name/${state.search}`\n        : `https://restcountries.eu/rest/v2/all`;\n    //Fetch country data and set it on state\n    axios\n      .get(url)\n      .then((response) => {\n        const countries: Country[] = response.data.map(\n          (result: RESTCountriesResponse, index: number) => {\n            console.log(result);\n            return {\n              id: index,\n              imgUrl: result.flag,\n              name: result.name,\n              population: result.population,\n              region: result.region,\n              capital: result.capital,\n              latitude: result.latlng[0],\n              longitude: result.latlng[1],\n            };\n          }\n        );\n        dispatch({ type: 'fetch_countries', payload: countries });\n      })\n      .catch((error) => {\n        state.search !== ''\n          ? dispatch({\n              type: 'error',\n              payload: 'No countries matched your search.',\n            })\n          : dispatch({ type: 'error', payload: error.message });\n      });\n  }, [state.search]);\n\n  const toggleMode = () => {\n    const newMode = state.mode === 'light' ? 'dark' : 'light';\n    dispatch({ type: 'toggle_mode', payload: newMode });\n  };\n\n  const onSearchSubmit = (input: string) => {\n    dispatch({ type: 'submit_search', payload: input });\n  };\n\n  const renderCountries = () => {\n    if (state.loading) {\n      return <Loading />;\n    }\n\n    if (state.error) {\n      return <Error>{state.error}</Error>;\n    }\n\n    return <CardList countries={state.countries} />;\n  };\n\n  return (\n    <Router>\n      <ModeContext.Provider value={state.mode}>\n        <StyledApp mode={state.mode}>\n          <Nav toggleMode={toggleMode} />\n          <Switch>\n            <Route\n              exact\n              path='/'\n              render={(props) => (\n                <Countries\n                  {...props}\n                  onSearchSubmit={onSearchSubmit}\n                  renderContent={renderCountries}\n                />\n              )}\n            />\n            <Route exact path='/destinations' component={Destinations} />\n          </Switch>\n        </StyledApp>\n      </ModeContext.Provider>\n    </Router>\n  );\n};\n\nexport default App;\n\n// Styled component\nconst StyledApp = styled.div`\n  min-height: 100vh;\n\n  ${({ mode = 'light' }: StyledAppProps) =>\n    mode === `light`\n      ? `\n    background-color: #ededed;\n    color: black;\n  `\n      : `\n    background-color: #212E37;\n    color: white;\n  `};\n`;\n\ninterface StyledAppProps {\n  mode: string;\n}\n\nconst Error = styled.h3`\n  text-align: center;\n  margin: 3%;\n`;\n"]},"metadata":{},"sourceType":"module"}