{"ast":null,"code":"var _jsxFileName = \"/Users/Sarah Schwartz/Desktop/CODING/Apps TYPESCRIPT/countries-react-ts/src/components/App.tsx\";\nimport React, { useEffect, useReducer } from 'react';\nimport CardList from './CardList';\nimport Loading from './Loading';\nimport Nav from './Nav';\nimport axios from 'axios';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'fetch_countries':\n      return { ...state,\n        countries: action.payload,\n        error: null,\n        loading: false\n      };\n\n    case 'error':\n      return { ...state,\n        error: action.payload,\n        loading: false\n      };\n\n    case 'change_mode':\n      return { ...state,\n        mode: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst App = () => {\n  const initialState = {\n    countries: [],\n    error: null,\n    loading: true,\n    mode: 'light'\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    const url = `https://restcountries.eu/rest/v2/all`; //Fetch country data and set it on state\n\n    axios.get(url).then(response => {\n      const countries = response.data.map((result, index) => {\n        return {\n          id: index,\n          imgUrl: result.flag,\n          name: result.name,\n          population: result.population,\n          region: result.region,\n          capital: result.capital\n        };\n      });\n      dispatch({\n        type: 'fetch_countries',\n        payload: countries\n      });\n    }).catch(error => {\n      dispatch({\n        type: 'error',\n        payload: error.message\n      });\n    });\n  }, []);\n\n  const renderCountries = () => {\n    if (state.loading) {\n      return React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      });\n    }\n\n    if (state.error) {\n      return React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, state.error);\n    }\n\n    return React.createElement(CardList, {\n      countries: state.countries,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    });\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(Nav, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), renderCountries());\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/Sarah Schwartz/Desktop/CODING/Apps TYPESCRIPT/countries-react-ts/src/components/App.tsx"],"names":["React","useEffect","useReducer","CardList","Loading","Nav","axios","reducer","state","action","type","countries","payload","error","loading","mode","App","initialState","dispatch","url","get","then","response","data","map","result","index","id","imgUrl","flag","name","population","region","capital","catch","message","renderCountries"],"mappings":"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","sourcesContent":["import React, { useEffect, useReducer, useState } from 'react';\nimport CardList from './CardList';\nimport Loading from './Loading';\nimport Nav from './Nav';\nimport axios from 'axios';\n\nexport interface Country {\n  id: number;\n  imgUrl: string;\n  name: string;\n  population: string;\n  region: string;\n  capital: string;\n}\n\ninterface AppState {\n  countries: Country[];\n  error: string | null;\n  loading: boolean;\n  mode: string;\n}\n\ninterface Action {\n  type: string;\n  // Accept additional properties\n  [x: string]: any;\n}\n\ninterface RESTCountriesResponse {\n  flag: string;\n  name: string;\n  population: number;\n  region: string;\n  capital: string;\n}\n\nconst reducer = (state: AppState, action: Action) => {\n  switch (action.type) {\n    case 'fetch_countries':\n      return {\n        ...state,\n        countries: action.payload,\n        error: null,\n        loading: false,\n      };\n    case 'error':\n      return { ...state, error: action.payload, loading: false };\n    case 'change_mode':\n      return { ...state, mode: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst App = () => {\n  const initialState: AppState = {\n    countries: [],\n    error: null,\n    loading: true,\n    mode: 'light',\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    const url = `https://restcountries.eu/rest/v2/all`;\n    //Fetch country data and set it on state\n    axios\n      .get(url)\n      .then((response) => {\n        const countries: Country[] = response.data.map(\n          (result: RESTCountriesResponse, index: number) => {\n            return {\n              id: index,\n              imgUrl: result.flag,\n              name: result.name,\n              population: result.population,\n              region: result.region,\n              capital: result.capital,\n            };\n          }\n        );\n        dispatch({ type: 'fetch_countries', payload: countries });\n      })\n      .catch((error) => {\n        dispatch({ type: 'error', payload: error.message });\n      });\n  }, []);\n\n  const renderCountries = () => {\n    if (state.loading) {\n      return <Loading />;\n    }\n\n    if (state.error) {\n      return <h3>{state.error}</h3>;\n    }\n\n    return <CardList countries={state.countries} />;\n  };\n\n  return (\n    <div>\n      <Nav />\n      {renderCountries()}\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}