{"ast":null,"code":"var _jsxFileName = \"/Users/Sarah Schwartz/Desktop/CODING/Apps TYPESCRIPT/countries-react-ts/src/components/App.tsx\";\nimport React, { useEffect, useReducer } from 'react';\nimport ModeContext from '../contexts/mode';\nimport CardList from './CardList';\nimport Loading from './Loading';\nimport Nav from './Nav';\nimport Search from './Search';\nimport axios from 'axios';\nimport styled from 'styled-components';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'fetch_countries':\n      return { ...state,\n        countries: action.payload,\n        error: null,\n        loading: false\n      };\n\n    case 'error':\n      return { ...state,\n        error: action.payload,\n        loading: false\n      };\n\n    case 'toggle_mode':\n      return { ...state,\n        mode: action.payload\n      };\n\n    case 'submit_search':\n      return { ...state,\n        search: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst App = () => {\n  const initialState = {\n    countries: [],\n    error: null,\n    loading: true,\n    mode: 'light',\n    search: ''\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    const url = state.search !== '' ? `https://restcountries.eu/rest/v2/name/${state.search}` : `https://restcountries.eu/rest/v2/all`; //Fetch country data and set it on state\n\n    axios.get(url).then(response => {\n      const countries = response.data.map((result, index) => {\n        return {\n          id: index,\n          imgUrl: result.flag,\n          name: result.name,\n          population: result.population,\n          region: result.region,\n          capital: result.capital\n        };\n      });\n      dispatch({\n        type: 'fetch_countries',\n        payload: countries\n      });\n    }).catch(error => {\n      state.search !== '' ? dispatch({\n        type: 'error',\n        payload: 'No countries matched your search.'\n      }) : dispatch({\n        type: 'error',\n        payload: error.message\n      });\n    });\n  }, [state.search]);\n\n  const toggleMode = () => {\n    const newMode = state.mode === 'light' ? 'dark' : 'light';\n    dispatch({\n      type: 'toggle_mode',\n      payload: newMode\n    });\n  };\n\n  const onSearchSubmit = input => {\n    dispatch({\n      type: 'submit_search',\n      payload: input\n    });\n  };\n\n  const renderCountries = () => {\n    if (state.loading) {\n      return React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      });\n    }\n\n    if (state.error) {\n      return React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, state.error);\n    }\n\n    return React.createElement(CardList, {\n      countries: state.countries,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    });\n  };\n\n  return React.createElement(ModeContext.Provider, {\n    value: state.mode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(StyledApp, {\n    mode: state.mode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(Nav, {\n    toggleMode: toggleMode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }), React.createElement(Search, {\n    onSearchSubmit: onSearchSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }), renderCountries()));\n};\n\nexport default App; // Styled component\n\nconst StyledApp = styled.div`\n  min-height: 100vh;\n\n  ${({\n  mode = 'light'\n}) => mode === `light` ? `\n    background-color: #ededed;\n  ` : `\n    background-color: #212E37;\n  `};\n`;","map":{"version":3,"sources":["/Users/Sarah Schwartz/Desktop/CODING/Apps TYPESCRIPT/countries-react-ts/src/components/App.tsx"],"names":["React","useEffect","useReducer","ModeContext","CardList","Loading","Nav","Search","axios","styled","reducer","state","action","type","countries","payload","error","loading","mode","search","App","initialState","dispatch","url","get","then","response","data","map","result","index","id","imgUrl","flag","name","population","region","capital","catch","message","toggleMode","newMode","onSearchSubmit","input","renderCountries","StyledApp","div"],"mappings":"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","sourcesContent":["import React, { useEffect, useReducer } from 'react';\nimport ModeContext from '../contexts/mode';\nimport CardList from './CardList';\nimport Loading from './Loading';\nimport Nav from './Nav';\nimport Search from './Search';\nimport axios from 'axios';\nimport styled from 'styled-components';\n\nexport interface Country {\n  id: number;\n  imgUrl: string;\n  name: string;\n  population: string;\n  region: string;\n  capital: string;\n}\n\ninterface AppState {\n  countries: Country[];\n  error: string | null;\n  loading: boolean;\n  mode: string;\n  search: string;\n}\n\ninterface Action {\n  type: string;\n  // Accept additional properties\n  [x: string]: any;\n}\n\ninterface RESTCountriesResponse {\n  flag: string;\n  name: string;\n  population: number;\n  region: string;\n  capital: string;\n}\n\nconst reducer = (state: AppState, action: Action) => {\n  switch (action.type) {\n    case 'fetch_countries':\n      return {\n        ...state,\n        countries: action.payload,\n        error: null,\n        loading: false,\n      };\n    case 'error':\n      return { ...state, error: action.payload, loading: false };\n    case 'toggle_mode':\n      return { ...state, mode: action.payload };\n    case 'submit_search':\n      return { ...state, search: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst App = () => {\n  const initialState: AppState = {\n    countries: [],\n    error: null,\n    loading: true,\n    mode: 'light',\n    search: '',\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    const url =\n      state.search !== ''\n        ? `https://restcountries.eu/rest/v2/name/${state.search}`\n        : `https://restcountries.eu/rest/v2/all`;\n    //Fetch country data and set it on state\n    axios\n      .get(url)\n      .then((response) => {\n        const countries: Country[] = response.data.map(\n          (result: RESTCountriesResponse, index: number) => {\n            return {\n              id: index,\n              imgUrl: result.flag,\n              name: result.name,\n              population: result.population,\n              region: result.region,\n              capital: result.capital,\n            };\n          }\n        );\n        dispatch({ type: 'fetch_countries', payload: countries });\n      })\n      .catch((error) => {\n        state.search !== ''\n          ? dispatch({\n              type: 'error',\n              payload: 'No countries matched your search.',\n            })\n          : dispatch({ type: 'error', payload: error.message });\n      });\n  }, [state.search]);\n\n  const toggleMode = () => {\n    const newMode = state.mode === 'light' ? 'dark' : 'light';\n    dispatch({ type: 'toggle_mode', payload: newMode });\n  };\n\n  const onSearchSubmit = (input: string) => {\n    dispatch({ type: 'submit_search', payload: input });\n  };\n\n  const renderCountries = () => {\n    if (state.loading) {\n      return <Loading />;\n    }\n\n    if (state.error) {\n      return <h3>{state.error}</h3>;\n    }\n\n    return <CardList countries={state.countries} />;\n  };\n\n  return (\n    <ModeContext.Provider value={state.mode}>\n      <StyledApp mode={state.mode}>\n        <Nav toggleMode={toggleMode} />\n        <Search onSearchSubmit={onSearchSubmit} />\n        {renderCountries()}\n      </StyledApp>\n    </ModeContext.Provider>\n  );\n};\n\nexport default App;\n\n// Styled component\nconst StyledApp = styled.div`\n  min-height: 100vh;\n\n  ${({ mode = 'light' }: StyledAppProps) =>\n    mode === `light`\n      ? `\n    background-color: #ededed;\n  `\n      : `\n    background-color: #212E37;\n  `};\n`;\n\ninterface StyledAppProps {\n  mode: string;\n}\n"]},"metadata":{},"sourceType":"module"}