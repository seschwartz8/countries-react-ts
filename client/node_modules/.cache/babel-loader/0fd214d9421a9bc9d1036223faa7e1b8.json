{"ast":null,"code":"var _jsxFileName = \"/Users/Sarah Schwartz/Desktop/CODING/Apps TYPESCRIPT/practice-TS-react/src/components/Hangman.tsx\";\nimport '../css/Hangman.css';\nimport React, { Component } from 'react';\n\nclass Hangman extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      word: '',\n      currentLetters: [],\n      fails: 0\n    };\n  }\n\n  setWord(word) {\n    this.setState({\n      word: word\n    });\n  }\n\n  get length() {\n    let {\n      word\n    } = this.state;\n    return word.length;\n  }\n\n  initializeLetters() {\n    this.setState({\n      currentLetters: []\n    });\n\n    for (let i = 0; i < this.length; i++) {\n      this.setState(prevState => {\n        prevState.currentLetters.push('-');\n        return {\n          currentLetters: prevState.currentLetters\n        };\n      });\n    }\n  }\n\n  updateCurrentLetters(letter) {\n    let letterFound = false;\n\n    for (let i = 0; i < this.length; i++) {\n      if (this.state.word[i].toLowerCase() === letter.toLowerCase()) {\n        this.setState(prevState => {\n          prevState.currentLetters[i] = letter;\n          return {\n            currentLetters: prevState.currentLetters\n          };\n        });\n        letterFound = true;\n      }\n    }\n\n    if (!letterFound) {\n      this.setState(prevState => {\n        return {\n          fails: prevState.fails++\n        };\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Hangman Function\");\n  }\n\n}\n\nexport default Hangman;","map":{"version":3,"sources":["/Users/Sarah Schwartz/Desktop/CODING/Apps TYPESCRIPT/practice-TS-react/src/components/Hangman.tsx"],"names":["React","Component","Hangman","constructor","props","state","word","currentLetters","fails","setWord","setState","length","initializeLetters","i","prevState","push","updateCurrentLetters","letter","letterFound","toLowerCase","render"],"mappings":";AAAA,OAAO,oBAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAUA,MAAMC,OAAN,SAAsBD,SAAtB,CAAoD;AAClDE,EAAAA,WAAW,CAACC,KAAD,EAAkB;AAC3B,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK;AAEXC,MAAAA,cAAc,EAAE,EAFL;AAGXC,MAAAA,KAAK,EAAE;AAHI,KAAb;AAKD;;AAEDC,EAAAA,OAAO,CAACH,IAAD,EAAqB;AAC1B,SAAKI,QAAL,CAAc;AAAEJ,MAAAA,IAAI,EAAEA;AAAR,KAAd;AACD;;AAED,MAAIK,MAAJ,GAAqB;AACnB,QAAI;AAAEL,MAAAA;AAAF,QAAW,KAAKD,KAApB;AACA,WAAOC,IAAI,CAACK,MAAZ;AACD;;AAEDC,EAAAA,iBAAiB,GAAS;AACxB,SAAKF,QAAL,CAAc;AAAEH,MAAAA,cAAc,EAAE;AAAlB,KAAd;;AACA,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKF,MAAzB,EAAiCE,CAAC,EAAlC,EAAsC;AACpC,WAAKH,QAAL,CAAcI,SAAS,IAAI;AACzBA,QAAAA,SAAS,CAACP,cAAV,CAAyBQ,IAAzB,CAA8B,GAA9B;AACA,eAAO;AAAER,UAAAA,cAAc,EAAEO,SAAS,CAACP;AAA5B,SAAP;AACD,OAHD;AAID;AACF;;AAEDS,EAAAA,oBAAoB,CAACC,MAAD,EAAuB;AACzC,QAAIC,WAAoB,GAAG,KAA3B;;AACA,SAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKF,MAAzB,EAAiCE,CAAC,EAAlC,EAAsC;AACpC,UAAI,KAAKR,KAAL,CAAWC,IAAX,CAAgBO,CAAhB,EAAmBM,WAAnB,OAAqCF,MAAM,CAACE,WAAP,EAAzC,EAA+D;AAC7D,aAAKT,QAAL,CAAcI,SAAS,IAAI;AACzBA,UAAAA,SAAS,CAACP,cAAV,CAAyBM,CAAzB,IAA8BI,MAA9B;AACA,iBAAO;AAAEV,YAAAA,cAAc,EAAEO,SAAS,CAACP;AAA5B,WAAP;AACD,SAHD;AAIAW,QAAAA,WAAW,GAAG,IAAd;AACD;AACF;;AACD,QAAI,CAACA,WAAL,EAAkB;AAChB,WAAKR,QAAL,CAAcI,SAAS,IAAI;AACzB,eAAO;AAAEN,UAAAA,KAAK,EAAEM,SAAS,CAACN,KAAV;AAAT,SAAP;AACD,OAFD;AAGD;AACF;;AAEDY,EAAAA,MAAM,GAAG;AACP,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAP;AACD;;AAlDiD;;AAqDpD,eAAelB,OAAf","sourcesContent":["import '../css/Hangman.css';\nimport React, { Component } from 'react';\n\ninterface AppProps {}\n\ninterface AppState {\n  word: string;\n  currentLetters: string[];\n  fails: number;\n}\n\nclass Hangman extends Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      word: '',\n      currentLetters: [],\n      fails: 0\n    };\n  }\n\n  setWord(word: string): void {\n    this.setState({ word: word });\n  }\n\n  get length(): number {\n    let { word } = this.state;\n    return word.length;\n  }\n\n  initializeLetters(): void {\n    this.setState({ currentLetters: [] });\n    for (let i = 0; i < this.length; i++) {\n      this.setState(prevState => {\n        prevState.currentLetters.push('-');\n        return { currentLetters: prevState.currentLetters };\n      });\n    }\n  }\n\n  updateCurrentLetters(letter: string): void {\n    let letterFound: boolean = false;\n    for (let i = 0; i < this.length; i++) {\n      if (this.state.word[i].toLowerCase() === letter.toLowerCase()) {\n        this.setState(prevState => {\n          prevState.currentLetters[i] = letter;\n          return { currentLetters: prevState.currentLetters };\n        });\n        letterFound = true;\n      }\n    }\n    if (!letterFound) {\n      this.setState(prevState => {\n        return { fails: prevState.fails++ };\n      });\n    }\n  }\n\n  render() {\n    return <div>Hangman Function</div>;\n  }\n}\n\nexport default Hangman;\n"]},"metadata":{},"sourceType":"module"}